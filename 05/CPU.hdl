// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

//handle the instruction as a combinational chip


Mux16(a[0..15]=false, b=instruction,  sel=instruction[15], out=cinstruction, out[3]=writeM, out[5]=d1, out[4]=d2, out[12]=a, out[11]=c1, out[10]=c2, out[9]=c3, out[8]=c4, out[7]=c5, out[6]=c6, out[2]=j1, out[1]=j2, out[0]=j3);

//handle the instruction
/if the MSB of instruction is 0, store value in ARegister
//if the MSB of instruction is 1, execute

//select what to put in ARegister. if instruction[15]=0, itâ€™s an a-instruction
Mux16(a=instruction, b=outValue, sel=instruction[15], out=nextA);

//condition to load ARegister
Not(in=instruction[15], out=ainstruction);
Or(a=d1, b=ainstruction, out=loada);

ARegister(in=nextA, load=loada, out= aValue, out[0..14]=addressM);


DRegister(in=outValue, load=d2, out=dValue);

Mux16(a=aValue, b=inM, sel=a, out=amValue); //selectAM

ALU(zx=c1, nx=c2, zy=c3 , ny=c4, f=c5, no=c6, x=dValue, y=amValue, out=outM, out=outValue, zr=zr, ng=ng);



//control whether to jump
And(a=zr, b=j2, out=jumpzr);
And(a=ng, b=j1, out=jumpng);
Or(a=zr, b=ng, out=zrng);
Not(in=zrng, out=po);
And(a=po, b=j3, out=jumppo);

Or8Way(in[0]=jumpzr, in[1]=jumpng, in[2]=jumppo, in[3..7]=false, out=jump);

PC(reset=reset, in=aValue , load=jump, inc=true, out[0..14]=pc );

}